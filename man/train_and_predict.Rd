% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/train_and_predict.R
\name{train_and_predict}
\alias{train_and_predict}
\title{Train a model and generate class predictions}
\usage{
train_and_predict(model_spec, data_train, data_test, recipe)
}
\arguments{
\item{model_spec}{A tidymodels model specification.}

\item{data_train}{A data frame containing the training data.}

\item{data_test}{A data frame containing the testing data.}

\item{recipe}{A tidymodels recipe for preprocessing the data.}
}
\value{
A data frame containing the predicted classes along with the original \code{data_test} columns.
}
\description{
This function takes a model specification and a recipe, fits the model on the training data,
and returns predictions on the testing data.
}
\examples{
# Example usage of the `train_and_predict` function
library(testthat)
library(parsnip)
library(recipes)
library(workflows)
library(dplyr)
library(rsample)
set.seed(123)
data <- tibble(
  class = sample(c("A", "B"), 150, replace = TRUE),
  feature1 = rnorm(150),
  feature2 = rnorm(150)
)

# Split the data into training and testing sets
data_split <- initial_split(data, prop = 0.8)
data_train <- training(data_split)
data_test <- testing(data_split)

# Define the model specification
model_spec <- decision_tree() \%>\%
  set_engine("rpart") \%>\%
  set_mode("classification")

# Define the recipe (preprocessing)
recipe <- recipe(class ~ feature1 + feature2, data = data_train) \%>\%
  step_normalize(all_numeric())

# Run the function
predictions <- train_and_predict(model_spec, data_train, data_test, recipe)
head(predictions)
}
